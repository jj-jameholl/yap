<?php
/**
 * Created by PhpStorm.
 * User: zhanhong01
 * Date: 2019/1/9
 * Time: 9:18
 */

namespace App;

use App\Providers\BaseServiceProvider;
use App\Providers\DatabaseServiceProvider;
use App\Providers\EnvironmentServiceProvider;
use App\Providers\LoggerServiceProvider;
use App\Providers\RedisServiceProvider;
use App\Providers\RouterServiceProvider;
use Phalcon\Di;
use Phalcon\DiInterface;
use Phalcon\Di\FactoryDefault;
use Phalcon\Di\FactoryDefault\Cli;
use Phalcon\Events\ManagerInterface;
use Phalcon\Mvc\Application as PhalconApplication;
use Phalcon\Cli\Console as ConsoleApplication;

/**
 * Class Application
 * @package app
 * @property Di|DiInterface $_dependencyInjector
 */
class Application
{
    public $basePath = null;

    /**
     * @var bool
     */
    protected $isBooted = false;

    protected $application = null;

    protected $currentDi = null;

    /**
     * Application constructor.
     * @param string|null $basePath
     * @param DiInterface|null $di
     */
    public function __construct(string $basePath = null, DiInterface $di = null)
    {
        $this->currentDi = PHP_SAPI == "cli" ? new Cli() : new FactoryDefault();

        $this->application = PHP_SAPI == "cli" ? new ConsoleApplication($this->currentDi) : new PhalconApplication($this->currentDi);
        if ($basePath) {
            $this->setBasePath($basePath);
        }
        $this->registerBaseBindings();
        $this->registerBaseServiceProviders();
        if (PHP_SAPI == "cli") {
            return;
        }
        $this->boot();
    }

    /**
     * 启动多模块
     */
    public function boot()
    {
        $modules = [];
        $modulesPath = $this->basePath . '/app/Modules/';
        foreach (scandir($modulesPath) as $filename) {
            if ($filename == '.' || $filename == '..') {
                continue;
            }
            $modules[$filename] = [
                'className' => 'Module',
                'path' => $modulesPath . $filename . '/Module.php',
            ];
        }

        $this->application->registerModules($modules);
    }


    /**
     * @param null $arguments
     * @return mixed
     */
    public function handle($arguments = null)
    {
        if(PHP_SAPI == "cli"){
            $argv = $_SERVER['argv'];
            foreach ($argv as $k => $arg) {
                if ($k === 1) {
                    $arguments['task'] = $arg;
                } elseif ($k === 2) {
                    $arguments['action'] = $arg;
                } elseif ($k >= 3) {
                    $arguments['params'][] = $arg;
                }
            }
        }
        return $this->application->handle($arguments);
    }


    /**
     *
     */
    protected function registerBaseBindings()
    {
        $this->currentDi->set('app', $this->application, true);
    }

    /**
     *
     */
    protected function registerBaseServiceProviders()
    {
        $this->currentDi->register(new BaseServiceProvider());
        $this->currentDi->register(new EnvironmentServiceProvider());
        $this->currentDi->register(new LoggerServiceProvider());
        $this->currentDi->register(new DatabaseServiceProvider());
        $this->currentDi->register(new RedisServiceProvider());
        if (PHP_SAPI == "cli") {
            $this->registerTask();
            return;
        }
        $this->currentDi->register(new RouterServiceProvider());
        $this->dispatcherBind();
        $this->bindMutilModuleNamespace();
    }


    protected function registerTask()
    {
        $loader = $this->currentDi->get('autoloader');
        $loader->registerDirs([
            __DIR__ . '/Tasks'
        ]);

        $loader->register();
    }


    protected function dispatcherBind()
    {
        $eventsManager = $this->application->eventsManager;
        $eventsManager->attach(Events\Event::DISPATCHER, new Listeners\DispatcherListener());
        $this->application->dispatcher->setEventsManager($eventsManager);
    }

    /**
     * @return ManagerInterface
     */
    public function getEventsManager()
    {
        // TODO: Change the autogenerated stub
        return $this->currentDi->get('eventsManager');
    }

    /**
     * Set the base path for the application.
     *
     * @param  string $basePath
     * @return $this
     */
    public function setBasePath($basePath)
    {
        $this->basePath = rtrim($basePath, '\/');
        $this->bindPathsInContainer();
        return $this;
    }

    /**
     * 注册多模块的命名空间,解决命名空间冲突
     */
    protected function bindMutilModuleNamespace()
    {
        $loader = $this->currentDi->get('autoloader');
        $path = $this->currentDi->get('path');
        $loader->registerNamespaces(array(
            'Dashboard\Http\Controllers' => $path->modules . '/Dashboard/Http/Controllers/',
            'Front\Http\Controllers' => $path->modules . '/Front/Http/Controllers/',
            'Base\Http\Controllers' => $path->modules . '/Base/Http/Controllers/',
        ));
        $loader->register();
    }

    /**
     * Bind all of the application paths in the container.
     *
     * @return void
     */
    protected function bindPathsInContainer()
    {
        $path = new \stdClass();
        $path->base = $this->basePath;
        $path->app = $this->basePath . DIRECTORY_SEPARATOR . 'app';
        $path->config = $this->basePath . DIRECTORY_SEPARATOR . 'config';
        $path->storage = $this->basePath . DIRECTORY_SEPARATOR . 'storage';
        $path->modules = $path->app . DIRECTORY_SEPARATOR . 'Modules';
        $this->currentDi->set('path', $path, true);
    }

    /**
     * @param $name
     * @return mixed
     */
    public function get($name)
    {
        return $this->currentDi->get($name);
    }
}
